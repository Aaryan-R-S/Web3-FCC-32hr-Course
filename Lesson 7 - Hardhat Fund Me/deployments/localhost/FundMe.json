{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fundingAddress",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVersion",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x5ea89a5b0b5565878a86cb3987dc101e3810b5ef813c60bb0ca9ed54a22ee012",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1098453",
    "logsBloom": "0x
    "blockHash": "0xeccc4cc3cdc59d28d29d34fa493d9006e18fdeacaf1bf46cb7b59ae6abecf1f3",
    "transactionHash": "0x5ea89a5b0b5565878a86cb3987dc101e3810b5ef813c60bb0ca9ed54a22ee012",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1098453",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "f190750e25c1d7706b3e3de32929cc2c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fundingAddress\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Aaryan Raj Saxena\",\"details\":\"This implements price feed as our library\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feed as our library\"}},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract \"},\"withdraw()\":{\"notice\":\"This function withdraw funds from this contract \"}},\"notice\":\"This contract is a to demo a sample funding project\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// 1. Pragma\\npragma solidity ^0.8.8;\\n\\n// 2. Imports\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\n// 3. Errors\\nerror FundMe__NotOwner();\\n\\n// 4. Interfaces\\n\\n// 5. Libraries\\n\\n// 6. Contracts\\n/** @title A contract for crowd funding\\n *  @author Aaryan Raj Saxena\\n *  @notice This contract is a to demo a sample funding project\\n *  @dev This implements price feed as our library\\n */\\ncontract FundMe {\\n    // defining our library functions to be available on uint256 object\\n    // 1. Type Declarations\\n    using PriceConverter for uint256;\\n\\n    // 2. State variables\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // MORE GAS OPTIMIZED\\n    // Could we make this constant?  /* hint: no! We should make it immutable! As we have to define its value in the constructor later */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 1 * 1e18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    // 3. Events\\n\\n    // 4. Events\\n    modifier onlyOwner() {\\n        // require(msg.sender == owner), \\\"FundeMe__NotOwner\\\";\\n        // MORE GAS OPTIMIZED\\n        if (msg.sender != i_owner) revert FundMe__NotOwner();\\n        _;\\n    }\\n\\n    // 5. Functions\\n    // Constructor -> Receive -> Fallback -> External -> Public ->  Internal -> Private -> View -> Pure\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback() \\n\\n    /** @notice This function funds this contract \\n     *  @dev This implements price feed as our library\\n    */\\n    function fund() public payable {\\n        // first parameter of getConversionRate will be msg.value. To pass the other parameters you have to ultimately give it to the function only as parameter like msg.value.getConversionRate(\\\"secondParams\\\")\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(L4_PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    /** @notice This function withdraw funds from this contract \\n    */\\n    function withdraw() public payable onlyOwner {\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n\\n        // For sending money, 3 Methods:\\n        // 1. Transfer - , error\\n        // 2. Send - , bool\\n        // 3. Call - , bool\\n\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{ value: address(this).balance }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        address[] memory funders = s_funders;\\n        for (uint256 funderIndex = 0; funderIndex < funders.length; funderIndex++) {\\n            address funder = funders[funderIndex];\\n            // mappings can't be in memory, sorry!\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{ value: address(this).balance }(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getAddressToAmountFunded(address fundingAddress) public view returns (uint256){\\n        return s_addressToAmountFunded[fundingAddress];\\n    }    \\n    \\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getVersion() public view returns (uint256) {\\n        return s_priceFeed.version();\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n}\\n\",\"keccak256\":\"0xe2d66c056455831f6bec10d5027611bd1bbebf710146705577a95add5ae7046b\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\r\\n\\r\\n// This is not a contract but a library. This is because we will be using it in FundMe.sol as (uint).someFunctionOfThisLibrary\\r\\nlibrary PriceConverter {\\r\\n    \\r\\n    // We could make this public, but then we'd have to deploy it. So its \\\"internal\\\" so that no one from outside can interact with it but can easily implement it\\r\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\r\\n        // Rinkeby ETH / USD Address\\r\\n        // https://docs.chain.link/docs/ethereum-addresses/\\r\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(0x8A753747A1Fa494EC906cE90E9f37563A8AF630e);\\r\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\r\\n        // USD/ETH rate with 8 extra 0s for precision\\r\\n        return uint256(price * 1e10);   // here we are returning rate in USD/ETH * 1e18 (i.e. extra multiplier of 1e18 to have high precision instead of \\\"decimal\\\" which has low precision)\\r\\n    }\\r\\n\\r\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed) internal view returns (uint256){\\r\\n        uint256 ethPrice = getPrice(priceFeed);\\r\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\r\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\r\\n        return ethAmountInUsd;  // here we are returning value in USD * 1e18\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x2898ec53c2189c95c402b2c76c9c200f219a8d82942a3c37ba037e7fef487436\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200140038038062001400833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c6112816200017f6000396000818161041e0152818161066c01526106bc01526112816000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101b757610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101f4565b005b6100a16101f4565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b8c565b61032d565b6040516100d79190610bd2565b60405180910390f35b3480156100ec57600080fd5b506100f5610375565b6040516101029190610bd2565b60405180910390f35b61011361041c565b005b34801561012157600080fd5b5061012a61065c565b6040516101379190610bd2565b60405180910390f35b34801561014c57600080fd5b50610155610668565b6040516101629190610bfc565b60405180910390f35b34801561017757600080fd5b50610180610690565b60405161018d9190610c76565b60405180910390f35b61019e6101f4565b005b3480156101ac57600080fd5b506101b56106ba565b005b3480156101c357600080fd5b506101de60048036038101906101d99190610cbd565b61095e565b6040516101eb9190610bfc565b60405180910390f35b670de0b6b3a7640000610232600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109a690919063ffffffff16565b1015610273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026a90610d47565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c19190610d96565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103df57600080fd5b505afa1580156103f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104179190610e01565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a1576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561054c576000600182815481106104c7576104c6610e2e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061054490610e5d565b9150506104a4565b50600067ffffffffffffffff81111561056857610567610ea6565b5b6040519080825280602002602001820160405280156105965781602001602082028036833780820191505090505b50600190805190602001906105ac929190610a82565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105d390610f06565b60006040518083038185875af1925050503d8060008114610610576040519150601f19603f3d011682016040523d82523d6000602084013e610615565b606091505b5050905080610659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065090610f67565b60405180910390fd5b50565b670de0b6b3a764000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107c357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610779575b5050505050905060005b815181101561084d5760008282815181106107eb576107ea610e2e565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084590610e5d565b9150506107cd565b50600067ffffffffffffffff81111561086957610868610ea6565b5b6040519080825280602002602001820160405280156108975781602001602082028036833780820191505090505b50600190805190602001906108ad929190610a82565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108d490610f06565b60006040518083038185875af1925050503d8060008114610911576040519150601f19603f3d011682016040523d82523d6000602084013e610916565b606091505b505090508061095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095190610f67565b60405180910390fd5b5050565b60006001828154811061097457610973610e2e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109b2836109e2565b90506000670de0b6b3a764000085836109cb9190610f87565b6109d59190611010565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a2b57600080fd5b505afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6391906110b9565b5050509150506402540be40081610a7a9190611134565b915050919050565b828054828255906000526020600020908101928215610afb579160200282015b82811115610afa5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aa2565b5b509050610b089190610b0c565b5090565b5b80821115610b25576000816000905550600101610b0d565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5982610b2e565b9050919050565b610b6981610b4e565b8114610b7457600080fd5b50565b600081359050610b8681610b60565b92915050565b600060208284031215610ba257610ba1610b29565b5b6000610bb084828501610b77565b91505092915050565b6000819050919050565b610bcc81610bb9565b82525050565b6000602082019050610be76000830184610bc3565b92915050565b610bf681610b4e565b82525050565b6000602082019050610c116000830184610bed565b92915050565b6000819050919050565b6000610c3c610c37610c3284610b2e565b610c17565b610b2e565b9050919050565b6000610c4e82610c21565b9050919050565b6000610c6082610c43565b9050919050565b610c7081610c55565b82525050565b6000602082019050610c8b6000830184610c67565b92915050565b610c9a81610bb9565b8114610ca557600080fd5b50565b600081359050610cb781610c91565b92915050565b600060208284031215610cd357610cd2610b29565b5b6000610ce184828501610ca8565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d31601b83610cea565b9150610d3c82610cfb565b602082019050919050565b60006020820190508181036000830152610d6081610d24565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610da182610bb9565b9150610dac83610bb9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610de157610de0610d67565b5b828201905092915050565b600081519050610dfb81610c91565b92915050565b600060208284031215610e1757610e16610b29565b5b6000610e2584828501610dec565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e6882610bb9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e9b57610e9a610d67565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ef0600083610ed5565b9150610efb82610ee0565b600082019050919050565b6000610f1182610ee3565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f51600b83610cea565b9150610f5c82610f1b565b602082019050919050565b60006020820190508181036000830152610f8081610f44565b9050919050565b6000610f9282610bb9565b9150610f9d83610bb9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fd657610fd5610d67565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061101b82610bb9565b915061102683610bb9565b92508261103657611035610fe1565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61106081611041565b811461106b57600080fd5b50565b60008151905061107d81611057565b92915050565b6000819050919050565b61109681611083565b81146110a157600080fd5b50565b6000815190506110b38161108d565b92915050565b600080600080600060a086880312156110d5576110d4610b29565b5b60006110e38882890161106e565b95505060206110f4888289016110a4565b945050604061110588828901610dec565b935050606061111688828901610dec565b92505060806111278882890161106e565b9150509295509295909350565b600061113f82611083565b915061114a83611083565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561118957611188610d67565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111c6576111c5610d67565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561120357611202610d67565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112405761123f610d67565b5b82820290509291505056fea2646970667358221220845c8d5aa447c23f1abd6132e61d77132d7371f7d77520c1f017f01ef01f7bd764736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e8146101405780639e87a5cd1461016b578063b60d428814610196578063be2693f0146101a0578063d7b4750c146101b757610099565b80630343fb25146100a35780630d8e6e2c146100e05780633ccfd60b1461010b5780636b69a5921461011557610099565b36610099576100976101f4565b005b6100a16101f4565b005b3480156100af57600080fd5b506100ca60048036038101906100c59190610b8c565b61032d565b6040516100d79190610bd2565b60405180910390f35b3480156100ec57600080fd5b506100f5610375565b6040516101029190610bd2565b60405180910390f35b61011361041c565b005b34801561012157600080fd5b5061012a61065c565b6040516101379190610bd2565b60405180910390f35b34801561014c57600080fd5b50610155610668565b6040516101629190610bfc565b60405180910390f35b34801561017757600080fd5b50610180610690565b60405161018d9190610c76565b60405180910390f35b61019e6101f4565b005b3480156101ac57600080fd5b506101b56106ba565b005b3480156101c357600080fd5b506101de60048036038101906101d99190610cbd565b61095e565b6040516101eb9190610bfc565b60405180910390f35b670de0b6b3a7640000610232600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109a690919063ffffffff16565b1015610273576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161026a90610d47565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102c19190610d96565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103df57600080fd5b505afa1580156103f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104179190610e01565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104a1576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60018054905081101561054c576000600182815481106104c7576104c6610e2e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061054490610e5d565b9150506104a4565b50600067ffffffffffffffff81111561056857610567610ea6565b5b6040519080825280602002602001820160405280156105965781602001602082028036833780820191505090505b50600190805190602001906105ac929190610a82565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516105d390610f06565b60006040518083038185875af1925050503d8060008114610610576040519150601f19603f3d011682016040523d82523d6000602084013e610615565b606091505b5050905080610659576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161065090610f67565b60405180910390fd5b50565b670de0b6b3a764000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461073f576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107c357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610779575b5050505050905060005b815181101561084d5760008282815181106107eb576107ea610e2e565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084590610e5d565b9150506107cd565b50600067ffffffffffffffff81111561086957610868610ea6565b5b6040519080825280602002602001820160405280156108975781602001602082028036833780820191505090505b50600190805190602001906108ad929190610a82565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108d490610f06565b60006040518083038185875af1925050503d8060008114610911576040519150601f19603f3d011682016040523d82523d6000602084013e610916565b606091505b505090508061095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095190610f67565b60405180910390fd5b5050565b60006001828154811061097457610973610e2e565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109b2836109e2565b90506000670de0b6b3a764000085836109cb9190610f87565b6109d59190611010565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a2b57600080fd5b505afa158015610a3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6391906110b9565b5050509150506402540be40081610a7a9190611134565b915050919050565b828054828255906000526020600020908101928215610afb579160200282015b82811115610afa5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610aa2565b5b509050610b089190610b0c565b5090565b5b80821115610b25576000816000905550600101610b0d565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b5982610b2e565b9050919050565b610b6981610b4e565b8114610b7457600080fd5b50565b600081359050610b8681610b60565b92915050565b600060208284031215610ba257610ba1610b29565b5b6000610bb084828501610b77565b91505092915050565b6000819050919050565b610bcc81610bb9565b82525050565b6000602082019050610be76000830184610bc3565b92915050565b610bf681610b4e565b82525050565b6000602082019050610c116000830184610bed565b92915050565b6000819050919050565b6000610c3c610c37610c3284610b2e565b610c17565b610b2e565b9050919050565b6000610c4e82610c21565b9050919050565b6000610c6082610c43565b9050919050565b610c7081610c55565b82525050565b6000602082019050610c8b6000830184610c67565b92915050565b610c9a81610bb9565b8114610ca557600080fd5b50565b600081359050610cb781610c91565b92915050565b600060208284031215610cd357610cd2610b29565b5b6000610ce184828501610ca8565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d31601b83610cea565b9150610d3c82610cfb565b602082019050919050565b60006020820190508181036000830152610d6081610d24565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610da182610bb9565b9150610dac83610bb9565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610de157610de0610d67565b5b828201905092915050565b600081519050610dfb81610c91565b92915050565b600060208284031215610e1757610e16610b29565b5b6000610e2584828501610dec565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e6882610bb9565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610e9b57610e9a610d67565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610ef0600083610ed5565b9150610efb82610ee0565b600082019050919050565b6000610f1182610ee3565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f51600b83610cea565b9150610f5c82610f1b565b602082019050919050565b60006020820190508181036000830152610f8081610f44565b9050919050565b6000610f9282610bb9565b9150610f9d83610bb9565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fd657610fd5610d67565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061101b82610bb9565b915061102683610bb9565b92508261103657611035610fe1565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b61106081611041565b811461106b57600080fd5b50565b60008151905061107d81611057565b92915050565b6000819050919050565b61109681611083565b81146110a157600080fd5b50565b6000815190506110b38161108d565b92915050565b600080600080600060a086880312156110d5576110d4610b29565b5b60006110e38882890161106e565b95505060206110f4888289016110a4565b945050604061110588828901610dec565b935050606061111688828901610dec565b92505060806111278882890161106e565b9150509295509295909350565b600061113f82611083565b915061114a83611083565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561118957611188610d67565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111c6576111c5610d67565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561120357611202610d67565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff05821260008412600084121616156112405761123f610d67565b5b82820290509291505056fea2646970667358221220845c8d5aa447c23f1abd6132e61d77132d7371f7d77520c1f017f01ef01f7bd764736f6c63430008080033",
  "devdoc": {
    "author": "Aaryan Raj Saxena",
    "details": "This implements price feed as our library",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feed as our library"
      }
    },
    "title": "A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract "
      },
      "withdraw()": {
        "notice": "This function withdraw funds from this contract "
      }
    },
    "notice": "This contract is a to demo a sample funding project",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 62,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 72,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}